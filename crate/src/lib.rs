#[macro_use]
extern crate cfg_if;

extern crate wasm_bindgen;
extern crate web_sys;
use wasm_bindgen::prelude::*;
use flatgeobuf::*;

cfg_if! {
    // When the `console_error_panic_hook` feature is enabled, we can call the
    // `set_panic_hook` function to get better error messages if we ever panic.
    if #[cfg(feature = "console_error_panic_hook")] {
        extern crate console_error_panic_hook;
        use console_error_panic_hook::set_once as set_panic_hook;
    } else {
        #[inline]
        fn set_panic_hook() {}
    }
}

cfg_if! {
    // When the `wee_alloc` feature is enabled, use `wee_alloc` as the global
    // allocator.
    if #[cfg(feature = "wee_alloc")] {
        extern crate wee_alloc;
        #[global_allocator]
        static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;
    }
}

fn fgb_svg(_width: u32, _height: u32) -> Vec<u8> {
    // countries.fgb, id = ZAF
    let fbuf = [16, 0, 0, 0, 0, 0, 0, 0, 8, 0, 12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 60, 0, 0, 0, 4, 0, 0, 0, 27, 0, 0, 0, 0, 0, 3, 0, 0, 0, 90, 65, 70, 1, 0, 12, 0, 0, 0, 83, 111, 117, 116, 104, 32, 65, 102, 114, 105, 99, 97, 0, 20, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 8, 0, 20, 0, 0, 0, 0, 0, 0, 6, 4, 0, 0, 0, 1, 0, 0, 0, 24, 0, 0, 0, 0, 0, 18, 0, 16, 0, 8, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 18, 0, 0, 0, 0, 0, 0, 3, 240, 5, 0, 0, 4, 0, 0, 0, 188, 0, 0, 0, 236, 46, 80, 82, 96, 133, 63, 64, 98, 106, 75, 29, 228, 65, 61, 192, 98, 218, 55, 247, 87, 83, 63, 64, 36, 182, 187, 7, 232, 102, 61, 192, 43, 190, 161, 240, 217, 230, 62, 64, 42, 196, 35, 241, 242, 232, 61, 192, 14, 134, 58, 172, 112, 159, 62, 64, 103, 212, 124, 149, 124, 108, 62, 192, 43, 221, 93, 103, 67, 14, 62, 64, 131, 164, 79, 171, 232, 35, 63, 192, 246, 182, 153, 10, 241, 236, 60, 64, 27, 73, 130, 112, 5, 22, 64, 192, 139, 25, 225, 237, 65, 56, 60, 64, 73, 134, 28, 91, 207, 98, 64, 192, 192, 117, 197, 140, 240, 118, 59, 64, 71, 175, 6, 40, 13, 157, 64, 192, 230, 61, 206, 52, 97, 107, 58, 64, 109, 86, 125, 174, 182, 206, 64, 192, 58, 89, 106, 189, 223, 232, 57, 64, 218, 143, 20, 145, 97, 213, 64, 192, 134, 87, 146, 60, 215, 199, 57, 64, 11, 38, 254, 40, 234, 248, 64, 192, 157, 184, 28, 175, 64, 44, 57, 64, 119, 100, 172, 54, 255, 229, 64, 192, 216, 126, 50, 198, 135, 173, 56, 64, 179, 178, 125, 200, 91, 254, 64, 192, 240, 106, 185, 51, 19, 152, 55, 64, 219, 194, 243, 82, 177, 229, 64, 192, 86, 68, 77, 244, 249, 252, 54, 64, 50, 5, 107, 156, 77, 245, 64, 192, 252, 196, 1, 244, 251, 146, 54, 64, 201, 3, 145, 69, 154, 238, 64, 192, 47, 77, 17, 224, 244, 138, 53, 64, 245, 246, 231, 162, 33, 33, 65, 192, 240, 53, 4, 199, 101, 176, 52, 64, 186, 218, 138, 253, 101, 53, 65, 192, 242, 122, 48, 41, 62, 18, 52, 64, 118, 107, 153, 12, 199, 101, 65, 192, 68, 23, 212, 183, 204, 157, 51, 64, 97, 255, 117, 110, 218, 104, 65, 192, 74, 9, 193, 170, 122, 49, 51, 64, 198, 20, 172, 113, 54, 59, 65, 192, 59, 199, 128, 236, 245, 218, 50, 64, 82, 181, 221, 4, 223, 56, 65, 192, 175, 121, 85, 103, 181, 108, 50, 64, 220, 71, 110, 77, 186, 255, 64, 192, 145, 38, 222, 1, 158, 96, 50, 64, 206, 27, 39, 133, 121, 17, 65, 192, 155, 231, 136, 124, 151, 62, 50, 64, 241, 132, 94, 127, 18, 239, 64, 192, 57, 98, 45, 62, 5, 64, 50, 64, 80, 138, 86, 238, 5, 164, 64, 192, 20, 150, 120, 64, 217, 236, 49, 64, 105, 171, 146, 200, 62, 78, 64, 192, 243, 89, 158, 7, 119, 63, 50, 64, 146, 89, 189, 195, 237, 54, 64, 192, 220, 126, 249, 100, 197, 56, 50, 64, 81, 244, 192, 199, 96, 169, 63, 192, 132, 131, 189, 137, 33, 145, 49, 64, 58, 5, 249, 217, 200, 185, 62, 192, 210, 86, 37, 145, 125, 16, 49, 64, 187, 236, 215, 157, 238, 224, 61, 192, 105, 84, 224, 100, 27, 16, 49, 64, 230, 204, 118, 133, 62, 224, 61, 192, 72, 223, 164, 105, 80, 88, 48, 64, 143, 112, 90, 240, 162, 147, 60, 192, 25, 89, 50, 199, 242, 210, 48, 64, 85, 249, 158, 145, 8, 21, 60, 192, 95, 37, 31, 187, 11, 56, 49, 64, 121, 61, 152, 20, 31, 91, 60, 192, 81, 76, 222, 0, 51, 99, 49, 64, 73, 245, 157, 95, 148, 200, 60, 192, 40, 124, 182, 14, 14, 214, 49, 64, 142, 3, 175, 150, 59, 219, 60, 192, 111, 241, 240, 158, 3, 119, 50, 64, 244, 53, 203, 101, 163, 11, 61, 192, 72, 112, 35, 101, 139, 0, 51, 64, 96, 57, 66, 6, 242, 248, 60, 192, 136, 158, 148, 73, 13, 229, 51, 64, 167, 5, 47, 250, 10, 118, 60, 192, 167, 205, 56, 13, 81, 229, 51, 64, 35, 50, 172, 226, 141, 196, 56, 192, 206, 24, 230, 4, 109, 42, 52, 64, 131, 248, 192, 142, 255, 234, 56, 192, 134, 115, 13, 51, 52, 194, 52, 64, 242, 122, 48, 41, 62, 222, 57, 192, 223, 195, 37, 199, 157, 170, 52, 64, 137, 96, 28, 92, 58, 122, 58, 192, 46, 58, 89, 106, 189, 227, 52, 64, 105, 84, 224, 100, 27, 212, 58, 192, 248, 198, 16, 0, 28, 155, 53, 64, 156, 110, 217, 33, 254, 185, 58, 192, 204, 99, 205, 200, 32, 27, 54, 64, 254, 129, 114, 219, 190, 71, 58, 192, 72, 252, 138, 53, 92, 148, 54, 64, 243, 33, 168, 26, 189, 250, 57, 192, 141, 10, 156, 108, 3, 211, 54, 64, 38, 253, 189, 20, 30, 128, 57, 192, 2, 46, 200, 150, 229, 79, 55, 64, 34, 195, 42, 222, 200, 68, 57, 192, 164, 83, 87, 62, 203, 187, 55, 64, 160, 56, 128, 126, 223, 99, 57, 192, 90, 185, 23, 152, 21, 54, 56, 64, 133, 65, 153, 70, 147, 171, 57, 192, 192, 206, 77, 155, 113, 6, 57, 64, 142, 233, 9, 75, 60, 184, 57, 192, 93, 195, 12, 141, 39, 170, 57, 64, 103, 43, 47, 249, 159, 124, 57, 192, 159, 172, 24, 174, 14, 196, 57, 64, 127, 222, 84, 164, 194, 44, 57, 192, 135, 54, 0, 27, 16, 241, 57, 64, 66, 209, 60, 128, 69, 178, 56, 192, 19, 239, 0, 79, 90, 124, 58, 64, 76, 164, 52, 155, 199, 157, 56, 192, 113, 88, 26, 248, 81, 201, 58, 64, 9, 113, 229, 236, 157, 61, 56, 192, 187, 208, 92, 167, 145, 30, 59, 64, 50, 87, 6, 213, 6, 147, 55, 192, 89, 80, 24, 148, 105, 4, 60, 64, 24, 34, 167, 175, 231, 211, 54, 192, 65, 185, 109, 223, 163, 110, 61, 64, 28, 179, 236, 73, 96, 23, 54, 192, 75, 34, 251, 32, 203, 214, 61, 64, 192, 32, 233, 211, 42, 26, 54, 192, 51, 111, 213, 117, 168, 82, 62, 64, 127, 51, 49, 93, 136, 69, 54, 192, 105, 198, 162, 233, 236, 168, 62, 64, 32, 39, 76, 24, 205, 38, 54, 192, 250, 40, 35, 46, 0, 49, 63, 64, 241, 157, 152, 245, 98, 64, 54, 192, 198, 77, 13, 52, 159, 171, 63, 64, 236, 19, 64, 49, 178, 168, 55, 192, 113, 4, 169, 20, 59, 238, 63, 64, 32, 150, 205, 28, 146, 94, 56, 192, 175, 63, 137, 207, 157, 192, 63, 64, 223, 249, 69, 9, 250, 123, 57, 192, 236, 78, 119, 158, 120, 214, 63, 64, 151, 171, 31, 155, 228, 215, 57, 192, 153, 102, 186, 215, 73, 85, 63, 64, 17, 29, 2, 71, 2, 169, 57, 192, 94, 104, 174, 211, 72, 11, 63, 64, 3, 152, 50, 112, 64, 187, 57, 192, 39, 23, 99, 96, 29, 243, 62, 64, 128, 73, 42, 83, 204, 5, 58, 192, 228, 45, 87, 63, 54, 173, 62, 64, 209, 65, 151, 112, 232, 101, 58, 192, 123, 76, 164, 52, 155, 175, 62, 64, 10, 75, 60, 160, 108, 190, 58, 192, 26, 49, 179, 207, 99, 72, 63, 64, 250, 156, 187, 93, 47, 73, 59, 192, 60, 247, 30, 46, 57, 222, 63, 64, 77, 19, 182, 159, 140, 45, 59, 192, 73, 162, 151, 81, 44, 9, 64, 64, 150, 38, 165, 160, 219, 187, 58, 192, 181, 224, 69, 95, 65, 106, 64, 64, 83, 90, 127, 75, 0, 190, 58, 192, 184, 1, 159, 31, 70, 74, 64, 64, 233, 243, 81, 70, 92, 120, 59, 192, 129, 179, 148, 44, 39, 59, 64, 64, 123, 188, 144, 14, 15, 77, 60, 192, 222, 174, 151, 166, 8, 26, 64, 64, 205, 88, 52, 157, 157, 192, 60, 192, 236, 46, 80, 82, 96, 133, 63, 64, 98, 106, 75, 29, 228, 65, 61, 192, 8, 227, 167, 113, 111, 250, 60, 64, 221, 39, 71, 1, 162, 244, 60, 192, 66, 62, 232, 217, 172, 138, 60, 64, 55, 24, 234, 176, 194, 165, 60, 192, 157, 217, 174, 208, 7, 19, 60, 64, 206, 142, 84, 223, 249, 217, 60, 192, 160, 194, 17, 164, 82, 136, 59, 64, 36, 97, 223, 78, 34, 62, 61, 192, 180, 34, 106, 162, 207, 255, 58, 64, 230, 204, 118, 133, 62, 224, 61, 192, 115, 184, 86, 123, 216, 191, 59, 64, 16, 116, 180, 170, 37, 165, 62, 192, 186, 247, 112, 201, 113, 27, 60, 64, 116, 97, 164, 23, 181, 139, 62, 192, 34, 225, 123, 127, 131, 74, 60, 64, 154, 204, 120, 91, 233, 57, 62, 192, 41, 237, 13, 190, 48, 217, 60, 64, 86, 13, 194, 220, 238, 17, 62, 192, 127, 193, 110, 216, 182, 4, 61, 64, 114, 224, 213, 114, 103, 190, 61, 192, 105, 197, 55, 20, 62, 83, 61, 64, 98, 106, 75, 29, 228, 65, 61, 192, 8, 227, 167, 113, 111, 250, 60, 64, 221, 39, 71, 1, 162, 244, 60, 192, 0, 0, 0, 0, 2, 0, 0, 0, 82, 0, 0, 0, 94, 0, 0, 0];
    let feature = Feature::init_from_table(flatbuffers::Table::new(&fbuf, 16));
    let geometry = feature.geometry().unwrap();
    let mut svg_data: Vec<u8> = Vec::new();
    geometry.to_svg(&mut svg_data, GeometryType::MultiPolygon, true);
    svg_data
}

// Called by our JS entry point to run the example
#[wasm_bindgen]
pub fn run() -> Result<(), JsValue> {
    // If the `console_error_panic_hook` feature is enabled this will set a panic hook, otherwise
    // it will do nothing.
    set_panic_hook();

    // Use `web_sys`'s global `window` function to get a handle on the global
    // window object.
    let window = web_sys::window().expect("no global `window` exists");
    let document = window.document().expect("should have a document on window");
    let body = document.body().expect("document should have a body");

    // Manufacture the element we're gonna append
    let val = document.create_element("p")?;
    let svg_elem = r#"<svg xmlns="http://www.w3.org/2000/svg" version="1.2" baseProfile="tiny" width="800" height="400" viewBox="-180 -85.609038 360 169.254168" stroke-linecap="round" stroke-linejoin="round">
<g id="countries">"#;
    let svg_data = fgb_svg(
        window.inner_width().unwrap().as_f64().unwrap() as u32,
        window.inner_height().unwrap().as_f64().unwrap() as u32,
    );
    let svg_str = std::str::from_utf8(&svg_data).unwrap();
    let svg_end = r"</g></svg>";
    val.set_inner_html(&(svg_elem.to_owned()+svg_str+svg_end));

    body.append_child(&val)?;

    Ok(())
}

